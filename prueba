import pyxel
from laberinto import Muro
from constantes import (
    MUROS,
    ANIMACION_PACMAN_DERECHA,
    ANIMACION_PACMAN_IZQUIERDA,
    ANIMACION_PACMAN_ARRIBA,
    ANIMACION_PACMAN_ABAJO,
    ANIMACION_PACMAN_MUERTE,
    SPRITES_MUROS,
    VIDAS_POSICIONES,
    NIVEL_MAX,
    NIVEL_INICIAL
)
from pacman import Pacman
from fantasma import Fantasma
from puntos import Punto_pequeño, Punto_grande


class Tablero:

    def __init__(self, ancho, alto):

        self.ancho = ancho
        self.alto = alto

        self.nivel = NIVEL_INICIAL

        self.victoria_total = False
        self.en_pausa = True
        self.inicio = True
        self.temporizador_pausa = 120

        # Inicializa los muros
        self.muros = [Muro(tipo, x, y) for tipo, x, y in MUROS]

        # Inicializa los puntos pequeños
        self.puntos_pequenos = Punto_pequeño.generar_puntos()
        self.puntos_grandes = Punto_grande.generar_puntos()
        self.temporizador_textura = 0
      

        # Inicializa la puntuación
        self.puntuacion = 0

        # Inicializa a Pacman
        self.pacman = Pacman(192, 304)

        # Inicializa los fantasmas con áreas definidas
        self.fantasmas = [
            Fantasma("rojo", 0, 48, 200, 200),  # Rojo dentro de un área 16x16
            Fantasma("azul", 0, 64, 200, 200),  # Azul dentro de un área 16x16
            Fantasma("verde", 0, 80, 200, 200),  # Verde dentro de un área 16x16
            Fantasma("rosa", 0, 96, 200, 200),  # Rosa dentro de un área 16x16
        ]

        # Variables de tiempo de salida
        self.tiempos_salida_fantasma = {
            "rojo": 0,  # El rojo sale inmediatamente
            "verde": 5000,  # Sale después de 5segundos
            "azul": 10000,  # Sale después de 10 segundos
            "rosa": 15000,  # Sale después de 15 segundos
        }

        

        # Inicializa la condición de victoria y muerte
        self.victoria = False
        self.muerte = False
        self.temporizador_muerte = 0
        self.derrota = False

        # Inicializa la puntuación
        self.puntuacion = 0

        self.vision_reducida = False
        self.radio = 4 * 16

        #--------Configura Pyxel--------#
        pyxel.init(self.ancho, self.alto)
        pyxel.load("assets/sprites.pyxres")
        pyxel.run(self.update, self.draw)

#--------------------------------------------------UPDATE---------------------------------------------------#

    def update(self):

        if self.derrota:
            # Sprites para la derrota
            return
        
        if self.victoria_total:
            # Sprites para la victoria
            return
        
        if self.nivel > NIVEL_MAX:
            self.victoria_total = True
            return
        
        if self.victoria:
            self.nivel += 1
            self.victoria = False
            self.pacman.x, self.pacman.y = 192, 304
            for fantasma in self.fantasmas:
                    fantasma.x, fantasma.y = 200, 200
            self.en_pausa = True
            self.temporizador_pausa = 120
            return
        
        # En caso de muerte
        if self.muerte:
            self.temporizador_muerte += 1

            # Si la animación de muerte ha terminado, devuelve a los personajes a sus posiciones iniciales
            if self.temporizador_muerte >= (len(ANIMACION_PACMAN_MUERTE) * 10):
                self.muerte = False
                self.temporizador_muerte = 0
                self.pacman.x, self.pacman.y = 192, 304
                self.en_pausa = True
                self.temporizador_pausa = 120
                for fantasma in self.fantasmas:
                    fantasma.x, fantasma.y = 200, 200
                

            return
        
        # Pausa el movimiento de los personajes
        if self.en_pausa:
            self.temporizador_pausa -= 1
            if self.inicio:
                pyxel.blt(176,240,0,144,0,16,16,)
                pyxel.blt(192,240,0,160,0,16,16)
                pyxel.blt(208,240,0,176,0,16,16)
            if self.temporizador_pausa <= 0:
                self.inicio = False
                self.en_pausa = False
            return

        # Actualiza el temporizador de textura de los puntos
        self.temporizador_textura += 1

        # Cada 3 segundos (180 frames a 60 FPS), cambia la textura de los puntos
        if self.temporizador_textura >= 60:
            self.temporizador_textura = 0

        # Movimiento de Pac-Man
        if pyxel.btnp(pyxel.KEY_UP):
            self.pacman.direccion_deseada = "arriba"
        elif pyxel.btnp(pyxel.KEY_DOWN):
            self.pacman.direccion_deseada = "abajo"
        elif pyxel.btnp(pyxel.KEY_LEFT):
            self.pacman.direccion_deseada = "izquierda"
        elif pyxel.btnp(pyxel.KEY_RIGHT):
            self.pacman.direccion_deseada = "derecha"

        self.pacman.mover(self.muros)

    # Movimiento de los fantasmas
        for fantasma in self.fantasmas:
            if fantasma.color == "rojo":
            # Solo el fantasma rojo persigue a Pac-Man
                fantasma.movimiento_fantasma_rojo(self.pacman.x, self.pacman.y, self.muros)

            elif fantasma.color == "rosa":
                fantasma.movimiento_fantasma_rosa(self.pacman.x, self.pacman.y, self.pacman.direccion, self.muros)
            
            elif fantasma.color == "azul":
            # Mover al Fantasma Azul
                fantasma.movimiento_fantasma_azul(self.pacman.x, self.pacman.y, self.fantasmas[0].x, self.fantasmas[0].y, self.muros)

            elif fantasma.color == "verde":
                fantasma.movimiento_fantasma_verde(self.pacman.x, self.pacman.y, self.muros)


        

        # Verificar colisiones entre Pacman y puntos
        for punto in self.puntos_pequenos:
            if not punto.recogido and self.pacman.x == punto.x and self.pacman.y == punto.y:
                punto.recoger()
                self.puntuacion += 10
        
        for punto in self.puntos_grandes:
            if not punto.recogido and self.pacman.x == punto.x and self.pacman.y == punto.y:
                punto.recoger()
                self.puntuacion += 50
                # Modo huir de los fantasmas

        # Comprobar colisiones con fantasmas
        for fantasma in self.fantasmas:
            if fantasma.colisiona_con_pacman(self.pacman.x, self.pacman.y):
                self.pacman.vidas -= 1
                self.muerte = True
                if self.pacman.vidas == 0:
                    self.derrota = True

        # Comprobar la condición de victoria
        if pyxel.btnp(pyxel.KEY_V):
            self.victoria = True

        # Modo vision reducida
        if pyxel.btnp(pyxel.KEY_N):
            self.vision_reducida = not self.vision_reducida

        if all(punto.recogido for punto in self.puntos_pequenos) and all(punto.recogido for punto in self.puntos_grandes):
            self.victoria = True
            self.temporizador_pausa = 120
            self.en_pausa = True
            for punto in self.puntos_pequenos:
                punto.recogido = False

    
#--------------------------------------------------DRAW---------------------------------------------------#

    def draw(self):

        pyxel.cls(0)
        
        # Dibuja los muros
        for muro in self.muros:
            if self.vision_reducida and not self.esta_en_radio(muro.x, muro.y, self.radio):
                continue
            sprite = SPRITES_MUROS.get(muro.tipo, (0, 0, 16, 16))  # Sprite por defecto si no encuentra el tipo
            pyxel.blt(muro.x, muro.y, 0, *sprite, colkey=0)

        # Dibuja los puntos
        for punto in self.puntos_pequenos:
            if self.vision_reducida and not self.esta_en_radio(punto.x, punto.y, self.radio):
                continue
            if not punto.recogido:
                if self.temporizador_textura < 30:  # Primeros 1.5 segundos
                    pyxel.blt(punto.x, punto.y, 0, 32, 32, 16, 16)  # Textura normal
                else:  # Siguientes 1.5 segundos
                    pyxel.blt(punto.x, punto.y, 0, 64, 32, 16, 16)  # Textura alternativa

        for punto in self.puntos_grandes:
            if self.vision_reducida and not self.esta_en_radio(punto.x, punto.y, self.radio):
                continue
            if not punto.recogido:
                if self.temporizador_textura < 30:
                    pyxel.blt(punto.x, punto.y, 0, 48, 32, 16, 16)
                else:
                    pyxel.blt(punto.x, punto.y, 0, 80, 32, 16, 16)

        # Dibuja Fantasmas
        if not self.muerte:
            for fantasma in self.fantasmas:
                if self.vision_reducida and not self.esta_en_radio(fantasma.x, fantasma.y, self.radio):
                    continue
                x, y = fantasma.obtener_posicion()
                sprite = fantasma.obtener_sprite_fantasma()
                pyxel.blt(x, y, 0, sprite[0], sprite[1], 16, 16, 0)       


        # Dibuja a Pacman con el sprite correspondiente
        if self.muerte:
            self.dibujar_animacion_muerte()
        else:
            sprite = self.obtener_sprite_pacman()
            pyxel.blt(self.pacman.x, self.pacman.y, *sprite, colkey=0)

        if self.en_pausa:
            pyxel.blt(176, 240, 0, 144, 0, 16, 16)  # Sprite 1
            pyxel.blt(192, 240, 0, 160, 0, 16, 16)  # Sprite 2
            pyxel.blt(208, 240, 0, 176, 0, 16, 16)  # Sprite 3

        # Mostrar la puntuación
        pyxel.text(100, 5, f"Puntos: {self.puntuacion}", pyxel.COLOR_WHITE)

        # Mostrar el nivel
        if self.victoria_total <= 3:
            pyxel.text(150, 5, f"Nivel: {self.nivel}", pyxel.COLOR_ORANGE)

        # Mostrar las vidas de Pac-Man
        for i in range(self.pacman.vidas):
            x, y = VIDAS_POSICIONES[i]
            pyxel.blt(x, y, 0, 64, 0, 16, 16)

     # Mostrar el texto de victoria si se ha alcanzado
        if self.victoria:
            self.mostrar_texto_victoria()

#--------------------------------------------------FUNCIONES---------------------------------------------------#

    def obtener_sprite_pacman(self):
        # Selecciona la animación correcta según la dirección
        if self.pacman.direccion == "derecha":
            animacion = ANIMACION_PACMAN_DERECHA
        elif self.pacman.direccion == "izquierda":
            animacion = ANIMACION_PACMAN_IZQUIERDA
        elif self.pacman.direccion == "arriba":
            animacion = ANIMACION_PACMAN_ARRIBA
        else:  # "abajo"
            animacion = ANIMACION_PACMAN_ABAJO

        # Calcula el frame actual basado en pyxel.frame_count
        indice_frame = (pyxel.frame_count // 4) % len(animacion)
        return animacion[indice_frame]
    
    def dibujar_animacion_muerte(self):
        # Calcula el frame actual basado en temporizador_muerte
        indice_frame = self.temporizador_muerte // 10
        if indice_frame < len(ANIMACION_PACMAN_MUERTE):
            sprite = ANIMACION_PACMAN_MUERTE[indice_frame]
            pyxel.blt(self.pacman.x, self.pacman.y, *sprite, colkey=0)
        else:
            # Mantener el último frame durante 10 frames adicionales
            sprite = ANIMACION_PACMAN_MUERTE[-1]
            pyxel.blt(self.pacman.x, self.pacman.y, *sprite, colkey=0)
            
    def mostrar_texto_victoria(self):
        texto = "VICTORIA"
        x = self.ancho // 2 - len(texto) * 4
        y = self.alto // 2 - 4
        for i in range(-1, 2):
            for j in range(-1, 2):
                pyxel.text(x + i, y + j, texto, pyxel.COLOR_BLACK)
        pyxel.text(x, y, texto, pyxel.COLOR_YELLOW)

    def esta_en_radio(self, obj_x, obj_y, radio=64):
        pacman_x = self.pacman.x
        pacman_y = self.pacman.y
        return abs(obj_x - pacman_x) <= radio and abs(obj_y - pacman_y) <= radio
    
    